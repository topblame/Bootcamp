package kr.OpenAi;

import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.util.HashMap;
import java.util.Map;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

public class OpenAIApp {
	private static final String OPENAI_API_URL = "https://api.openai.com/v1/chat/completions";
	private static final String OPENAI_API_KEY = "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";
	
	 //외부에서 받은 날씨정보(JsonNode)를 활용해서 OpenAI에게 자연어 문장 생성하라고 요청. 단 그 결과를 String으로 변환
	public static String generateWeatherResponse(JsonNode weatherData) throws Exception{
		String prompt = String.format(
				"현재 %s의 날씨는 다음과 같습니다:\n온도: %s°C\n날씨: %s\n날씨에 관한 자세한 설명을 해주세요.",
				weatherData.get("name").asText(),
				weatherData.get("main").get("temp").asText(),
				weatherData.get("weather").get(0).get("description").asText()
		);
		
		//
		HttpClient client = HttpClient.newHttpClient();
		ObjectMapper mapper = new ObjectMapper();
		
		Map<String, Object> message = new HashMap<>();
		message.put("role", "user");
		message.put("content", prompt);
		
		Map<String, Object> data = new HashMap<>();
		data.put("model", "gpt-4o");
		data.put("messages", new Map[] {message});
		data.put("max_tokens", 200);
		
		String requestBody = mapper.writeValueAsString(data);
		
        //요청
        HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create(OPENAI_API_URL))
                .header("Content-Type", "application/json")
                .header("Authorization", "Bearer " + OPENAI_API_KEY)
                .POST(HttpRequest.BodyPublishers.ofString(requestBody))
                .build();
        //응답
        HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());
        JsonNode jsonResponse = mapper.readTree(response.body());
        return jsonResponse.get("choices").get(0).get("message").get("content").asText().trim();
        
 	}
}
